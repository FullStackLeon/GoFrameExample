// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/dep/dep.proto

package dep

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DepService_CreateDep_FullMethodName = "/api.dep.DepService/CreateDep"
	DepService_UpdateDep_FullMethodName = "/api.dep.DepService/UpdateDep"
	DepService_DeleteDep_FullMethodName = "/api.dep.DepService/DeleteDep"
	DepService_GetDep_FullMethodName    = "/api.dep.DepService/GetDep"
	DepService_ListDep_FullMethodName   = "/api.dep.DepService/ListDep"
)

// DepServiceClient is the client API for DepService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepServiceClient interface {
	CreateDep(ctx context.Context, in *CreateDepRequest, opts ...grpc.CallOption) (*CreateDepReply, error)
	UpdateDep(ctx context.Context, in *UpdateDepRequest, opts ...grpc.CallOption) (*UpdateDepReply, error)
	DeleteDep(ctx context.Context, in *DeleteDepRequest, opts ...grpc.CallOption) (*DeleteDepReply, error)
	GetDep(ctx context.Context, in *GetDepRequest, opts ...grpc.CallOption) (*GetDepReply, error)
	ListDep(ctx context.Context, in *ListDepRequest, opts ...grpc.CallOption) (*ListDepReply, error)
}

type depServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepServiceClient(cc grpc.ClientConnInterface) DepServiceClient {
	return &depServiceClient{cc}
}

func (c *depServiceClient) CreateDep(ctx context.Context, in *CreateDepRequest, opts ...grpc.CallOption) (*CreateDepReply, error) {
	out := new(CreateDepReply)
	err := c.cc.Invoke(ctx, DepService_CreateDep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) UpdateDep(ctx context.Context, in *UpdateDepRequest, opts ...grpc.CallOption) (*UpdateDepReply, error) {
	out := new(UpdateDepReply)
	err := c.cc.Invoke(ctx, DepService_UpdateDep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) DeleteDep(ctx context.Context, in *DeleteDepRequest, opts ...grpc.CallOption) (*DeleteDepReply, error) {
	out := new(DeleteDepReply)
	err := c.cc.Invoke(ctx, DepService_DeleteDep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) GetDep(ctx context.Context, in *GetDepRequest, opts ...grpc.CallOption) (*GetDepReply, error) {
	out := new(GetDepReply)
	err := c.cc.Invoke(ctx, DepService_GetDep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) ListDep(ctx context.Context, in *ListDepRequest, opts ...grpc.CallOption) (*ListDepReply, error) {
	out := new(ListDepReply)
	err := c.cc.Invoke(ctx, DepService_ListDep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepServiceServer is the server API for DepService service.
// All implementations must embed UnimplementedDepServiceServer
// for forward compatibility
type DepServiceServer interface {
	CreateDep(context.Context, *CreateDepRequest) (*CreateDepReply, error)
	UpdateDep(context.Context, *UpdateDepRequest) (*UpdateDepReply, error)
	DeleteDep(context.Context, *DeleteDepRequest) (*DeleteDepReply, error)
	GetDep(context.Context, *GetDepRequest) (*GetDepReply, error)
	ListDep(context.Context, *ListDepRequest) (*ListDepReply, error)
	mustEmbedUnimplementedDepServiceServer()
}

// UnimplementedDepServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepServiceServer struct {
}

func (UnimplementedDepServiceServer) CreateDep(context.Context, *CreateDepRequest) (*CreateDepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDep not implemented")
}
func (UnimplementedDepServiceServer) UpdateDep(context.Context, *UpdateDepRequest) (*UpdateDepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDep not implemented")
}
func (UnimplementedDepServiceServer) DeleteDep(context.Context, *DeleteDepRequest) (*DeleteDepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDep not implemented")
}
func (UnimplementedDepServiceServer) GetDep(context.Context, *GetDepRequest) (*GetDepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDep not implemented")
}
func (UnimplementedDepServiceServer) ListDep(context.Context, *ListDepRequest) (*ListDepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDep not implemented")
}
func (UnimplementedDepServiceServer) mustEmbedUnimplementedDepServiceServer() {}

// UnsafeDepServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepServiceServer will
// result in compilation errors.
type UnsafeDepServiceServer interface {
	mustEmbedUnimplementedDepServiceServer()
}

func RegisterDepServiceServer(s grpc.ServiceRegistrar, srv DepServiceServer) {
	s.RegisterService(&DepService_ServiceDesc, srv)
}

func _DepService_CreateDep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).CreateDep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_CreateDep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).CreateDep(ctx, req.(*CreateDepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_UpdateDep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).UpdateDep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_UpdateDep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).UpdateDep(ctx, req.(*UpdateDepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_DeleteDep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).DeleteDep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_DeleteDep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).DeleteDep(ctx, req.(*DeleteDepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_GetDep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).GetDep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_GetDep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).GetDep(ctx, req.(*GetDepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_ListDep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).ListDep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_ListDep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).ListDep(ctx, req.(*ListDepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepService_ServiceDesc is the grpc.ServiceDesc for DepService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dep.DepService",
	HandlerType: (*DepServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDep",
			Handler:    _DepService_CreateDep_Handler,
		},
		{
			MethodName: "UpdateDep",
			Handler:    _DepService_UpdateDep_Handler,
		},
		{
			MethodName: "DeleteDep",
			Handler:    _DepService_DeleteDep_Handler,
		},
		{
			MethodName: "GetDep",
			Handler:    _DepService_GetDep_Handler,
		},
		{
			MethodName: "ListDep",
			Handler:    _DepService_ListDep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dep/dep.proto",
}
